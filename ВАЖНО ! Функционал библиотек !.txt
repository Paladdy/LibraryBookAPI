
------------Шаблон параметров-----------

Основные параметры:
         -
         -
         -
         -
         -
         -
         -

------------AsyncSession--------

from sqlmodel.ext.asyncio.session import AsyncSession

Класс для асинхронного выполнения операций с базой данных. Использует SQLAlchemy Core или ORM c асинхронностью.
Указываем какой будет сессия (в данном случае асинхронной)

Является аргументом экземпляра Session = sessionmaker()

Основные параметры:
     -bind(движок базы данных)
     -expire_on_commit=True or False (statless или statefull)
     -autoflush=True or autoflush=False (Отвечает за то, когда данные отправятся в бд, True - автоматич, False - ручн)
     -autocommit (Любая информация будет фиксироваться сразу (не рекомендуется)) False или True
     -future(информационная новых возможностей SQLAlchemy 2.0)

Добавление объектов в Сессию.

У Сессии есть карта объектов, куда они заносятся как в тип данных Session.

identity_map = session.identity_map
print(identity_map) - просмотреть карту для занесенных объектов.


------------AsyncEngine--------


Основные параметры:
         -url (для подключения к БД. Тут указываем путь из config)
         -echo(bool. Логирование SQL-запросов в терминал или консоль)
         -pool_size(int) - Максимальное кол-во соединений в пуле. Гараж с готовыми соединениями, которые берутся для экономии ресурсов
                           и потом ставятся обратно. pool_size = 5 (например, максимум 5 соединений)
                                                     max_overflow = 2 (например, можно создать до 2 дополнительных соединений)
         -pool_recycle(int) время в секундах, через которое соединение будет пересоздаваться
         -connect_args(dict) Параметры для настройки подключения специфичные для драйвера
         -future
         -poolclass

Чтобы не оборачивать, можно импортировать один раз from sqlalchemy.ext.asyncio import create_async_engine и
не импортировать отдельно AsyncEgnine и create_engine !!
------------SQLModel--------

Генерит конструктор __init__ для всех классов, которые будут наследоваться от него.

